//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Client.Server.Models;

namespace Client.Server.Services
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IAreaService")]
    public interface IAreaService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/GetAll", ReplyAction = "http://tempuri.org/IAreaService/GetAllResponse")]
        Area[] GetAll();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/GetAll", ReplyAction = "http://tempuri.org/IAreaService/GetAllResponse")]
        System.Threading.Tasks.Task<Area[]> GetAllAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/Add", ReplyAction = "http://tempuri.org/IAreaService/AddResponse")]
        bool Add(Area area);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/Add", ReplyAction = "http://tempuri.org/IAreaService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(Area area);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/Delete", ReplyAction = "http://tempuri.org/IAreaService/DeleteResponse")]
        bool Delete(int areaId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/Delete", ReplyAction = "http://tempuri.org/IAreaService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int areaId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/UpdateName", ReplyAction = "http://tempuri.org/IAreaService/UpdateNameResponse")]
        bool UpdateName(int areaId, string name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/UpdateName", ReplyAction = "http://tempuri.org/IAreaService/UpdateNameResponse")]
        System.Threading.Tasks.Task<bool> UpdateNameAsync(int areaId, string name);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/UpdatePlz", ReplyAction = "http://tempuri.org/IAreaService/UpdatePlzResponse")]
        bool UpdatePlz(int areaId, int plz);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/UpdatePlz", ReplyAction = "http://tempuri.org/IAreaService/UpdatePlzResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlzAsync(int areaId, int plz);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/UpdateDrivers", ReplyAction = "http://tempuri.org/IAreaService/UpdateDriversResponse")]
        bool UpdateDrivers(int areaId, Driver[] drivers);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IAreaService/UpdateDrivers", ReplyAction = "http://tempuri.org/IAreaService/UpdateDriversResponse")]
        System.Threading.Tasks.Task<bool> UpdateDriversAsync(int areaId, Driver[] drivers);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAreaServiceChannel : IAreaService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreaServiceClient : System.ServiceModel.ClientBase<IAreaService>, IAreaService
    {

        public AreaServiceClient()
        {
        }

        public AreaServiceClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public AreaServiceClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public AreaServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public AreaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public Area[] GetAll()
        {
            return base.Channel.GetAll();
        }

        public System.Threading.Tasks.Task<Area[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }

        public bool Add(Area area)
        {
            return base.Channel.Add(area);
        }

        public System.Threading.Tasks.Task<bool> AddAsync(Area area)
        {
            return base.Channel.AddAsync(area);
        }

        public bool Delete(int areaId)
        {
            return base.Channel.Delete(areaId);
        }

        public System.Threading.Tasks.Task<bool> DeleteAsync(int areaId)
        {
            return base.Channel.DeleteAsync(areaId);
        }

        public bool UpdateName(int areaId, string name)
        {
            return base.Channel.UpdateName(areaId, name);
        }

        public System.Threading.Tasks.Task<bool> UpdateNameAsync(int areaId, string name)
        {
            return base.Channel.UpdateNameAsync(areaId, name);
        }

        public bool UpdatePlz(int areaId, int plz)
        {
            return base.Channel.UpdatePlz(areaId, plz);
        }

        public System.Threading.Tasks.Task<bool> UpdatePlzAsync(int areaId, int plz)
        {
            return base.Channel.UpdatePlzAsync(areaId, plz);
        }

        public bool UpdateDrivers(int areaId, Driver[] drivers)
        {
            return base.Channel.UpdateDrivers(areaId, drivers);
        }

        public System.Threading.Tasks.Task<bool> UpdateDriversAsync(int areaId, Driver[] drivers)
        {
            return base.Channel.UpdateDriversAsync(areaId, drivers);
        }
    }
}

