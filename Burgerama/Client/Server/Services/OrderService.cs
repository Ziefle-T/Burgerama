//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using Client.Server.Models;

namespace Client.Server.Services
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IOrderService")]
    public interface IOrderService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/GetAll", ReplyAction = "http://tempuri.org/IOrderService/GetAllResponse")]
        Order[] GetAll();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/GetAll", ReplyAction = "http://tempuri.org/IOrderService/GetAllResponse")]
        System.Threading.Tasks.Task<Order[]> GetAllAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/Add", ReplyAction = "http://tempuri.org/IOrderService/AddResponse")]
        bool Add(Order order);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/Add", ReplyAction = "http://tempuri.org/IOrderService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(Order order);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/Delete", ReplyAction = "http://tempuri.org/IOrderService/DeleteResponse")]
        bool Delete(int orderId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/Delete", ReplyAction = "http://tempuri.org/IOrderService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int orderId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateOrderNumber", ReplyAction = "http://tempuri.org/IOrderService/UpdateOrderNumberResponse")]
        bool UpdateOrderNumber(int orderId, string orderNumber);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateOrderNumber", ReplyAction = "http://tempuri.org/IOrderService/UpdateOrderNumberResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderNumberAsync(int orderId, string orderNumber);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateOrderDate", ReplyAction = "http://tempuri.org/IOrderService/UpdateOrderDateResponse")]
        bool UpdateOrderDate(int orderId, System.DateTime orderDate);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateOrderDate", ReplyAction = "http://tempuri.org/IOrderService/UpdateOrderDateResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderDateAsync(int orderId, System.DateTime orderDate);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateDescription", ReplyAction = "http://tempuri.org/IOrderService/UpdateDescriptionResponse")]
        bool UpdateDescription(int orderId, string description);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateDescription", ReplyAction = "http://tempuri.org/IOrderService/UpdateDescriptionResponse")]
        System.Threading.Tasks.Task<bool> UpdateDescriptionAsync(int orderId, string description);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateDriver", ReplyAction = "http://tempuri.org/IOrderService/UpdateDriverResponse")]
        bool UpdateDriver(int orderId, Driver driver);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateDriver", ReplyAction = "http://tempuri.org/IOrderService/UpdateDriverResponse")]
        System.Threading.Tasks.Task<bool> UpdateDriverAsync(int orderId, Driver driver);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateCustomer", ReplyAction = "http://tempuri.org/IOrderService/UpdateCustomerResponse")]
        bool UpdateCustomer(int orderId, Customer customer);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IOrderService/UpdateCustomer", ReplyAction = "http://tempuri.org/IOrderService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerAsync(int orderId, Customer customer);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : IOrderService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<IOrderService>, IOrderService
    {

        public OrderServiceClient()
        {
        }

        public OrderServiceClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public Order[] GetAll()
        {
            return base.Channel.GetAll();
        }

        public System.Threading.Tasks.Task<Order[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }

        public bool Add(Order order)
        {
            return base.Channel.Add(order);
        }

        public System.Threading.Tasks.Task<bool> AddAsync(Order order)
        {
            return base.Channel.AddAsync(order);
        }

        public bool Delete(int orderId)
        {
            return base.Channel.Delete(orderId);
        }

        public System.Threading.Tasks.Task<bool> DeleteAsync(int orderId)
        {
            return base.Channel.DeleteAsync(orderId);
        }

        public bool UpdateOrderNumber(int orderId, string orderNumber)
        {
            return base.Channel.UpdateOrderNumber(orderId, orderNumber);
        }

        public System.Threading.Tasks.Task<bool> UpdateOrderNumberAsync(int orderId, string orderNumber)
        {
            return base.Channel.UpdateOrderNumberAsync(orderId, orderNumber);
        }

        public bool UpdateOrderDate(int orderId, System.DateTime orderDate)
        {
            return base.Channel.UpdateOrderDate(orderId, orderDate);
        }

        public System.Threading.Tasks.Task<bool> UpdateOrderDateAsync(int orderId, System.DateTime orderDate)
        {
            return base.Channel.UpdateOrderDateAsync(orderId, orderDate);
        }

        public bool UpdateDescription(int orderId, string description)
        {
            return base.Channel.UpdateDescription(orderId, description);
        }

        public System.Threading.Tasks.Task<bool> UpdateDescriptionAsync(int orderId, string description)
        {
            return base.Channel.UpdateDescriptionAsync(orderId, description);
        }

        public bool UpdateDriver(int orderId, Driver driver)
        {
            return base.Channel.UpdateDriver(orderId, driver);
        }

        public System.Threading.Tasks.Task<bool> UpdateDriverAsync(int orderId, Driver driver)
        {
            return base.Channel.UpdateDriverAsync(orderId, driver);
        }

        public bool UpdateCustomer(int orderId, Customer customer)
        {
            return base.Channel.UpdateCustomer(orderId, customer);
        }

        public System.Threading.Tasks.Task<bool> UpdateCustomerAsync(int orderId, Customer customer)
        {
            return base.Channel.UpdateCustomerAsync(orderId, customer);
        }
    }
}